import com.apgsga.gradle.repo.extensions.RepoType
import com.apgsga.revision.manager.domain.RevisionManagerBuilder

plugins {
	id("com.apgsga.publish")
	id("com.apgsga.ssh")
	id("com.apgsga.version.resolver")
	id("com.apgsga.rpm.package")
	id "nu.studer.credentials" version "2.1"
}

project.ext {
	targetHost = project.hasProperty('targetHost') ? project.property('targetHost') : "jadas-e.apgsga.ch"
	sshUser = project.hasProperty('sshUser') ? project.property('sshUser') : "deployUser"
	sshPw = project.hasProperty('sshPw') ? project.property('sshPw') : "deployUserPassword"
	installTarget = project.hasProperty('installTarget') ? project.property('installTarget') : "CHEI212"
	bomLastRevision = project.hasProperty('bomLastRevision') ? project.property('bomLastRevision') : "SNAPSHOT"
	patchParentDir = project.hasProperty('patchParentDir') ? project.property('patchParentDir') : project.buildDir.absolutePath
	patchFileNames = project.hasProperty('patchFileNames') ? project.property('patchFileNames') : ""
	buildTyp = project.hasProperty('buildTyp') ? project.property('buildTyp') : "PATCH"
	rpmReleaseNr = project.hasProperty('rpmReleaseNr') ? project.property('rpmReleaseNr') : "2"
	downloadDir = project.hasProperty('downloadDir') ? project.property('downloadDir') : "downloads"
}
println "targetHost = ${project.ext.targetHost}"
println "installTarget = ${project.ext.installTarget}"
println "bomLastRevision = ${project.ext.bomLastRevision}"
println "rpmReleaseNr = ${project.ext.rpmReleaseNr}"
println "downloadDir = ${project.ext.downloadDir}"

apply from : "${project.gradle.gradleUserHomeDir}/common/portnr.gradle"

configurations {
	serviceRuntime.exclude group: 'log4j', module: 'log4j'
	serviceRuntime.exclude group: 'org.neo4j' , module: 'neo4j-ogm'
	serviceRuntime.exclude group: 'org.neo4j' , module: 'neo4j-ogm'
	serviceRuntime.exclude group: 'org.codehaus.groovy' , module: 'groovy-all'
}

apgRepos {
	// TODO (che, 27.2) : Profiles needed
	config(RepoType.MAVEN,[REPO_NAME:"testrepo",REPO_BASE_URL:"/Users/chhex/maven"])
	config(RepoType.MAVEN_RELEASE,[REPO_NAME:"repo", REPO_BASE_URL:"https://artifactory4t4apgsga.jfrog.io/artifactory4t4apgsga",REPO_USER:"dev",REPO_PASSWORD:credentials.devPw])
	config(RepoType.MAVEN_SNAPSHOT,[REPO_NAME:"snapshot", REPO_BASE_URL:"https://artifactory4t4apgsga.jfrog.io/artifactory4t4apgsga",REPO_USER:"dev",REPO_PASSWORD:credentials.devPw])
}

apgRepositories {
	mavenLocal()
	artifactory()
}


apgVersionResolver {
	bomArtifactId = 'dm-bom'
	bomGroupId = 'com.apgsga.testapp'
	bomBaseVersion = '1.0'
	bomLastRevision =  project.ext.bomLastRevision
	algorithm =  project.ext.buildTyp == "PATCH" ? RevisionManagerBuilder.AlgorithmTyp.PATCH : RevisionManagerBuilder.AlgorithmTyp.SNAPSHOT
	patches {
		parentDir = project.ext.patchParentDir
		fileNames = project.ext.patchFileNames
	}
}

apgPackage {
	name = 'echoservice'
	configurationName = "serviceRuntime"
	dependencies = [
		"com.apgsga.testapp:testapp-service"
    ]
	resourceFilters = "serviceport"
	appConfigFilters = "general"
	resourcesPath = "resources"
	installTarget = project.ext.installTarget
	mainProgramName  = "com.apgsga.testapp.TestappApplication"
	releaseNr = project.ext.rpmReleaseNr
}

apgGenericPublishConfig {
	artefactFile =  file ("${buildDir}/distributions/${apgPackage.archiveName}")
	local()
}


apgSshConfig {
	username credentials."${project.ext.sshUser}"
	userpwd credentials."${project.ext.sshPw}"
	destinationHost project.ext.targetHost
}

apgRpmDeployConfig {
	rpmFilePath "${buildDir}/distributions/"
	rpmFileName "${apgPackage.archiveName}"
	remoteDestFolder "${project.ext.downloadDir}"
}

publishing {
	publications {
		bom(MavenPublication) {
			apgVersionResolver.generateBom { }
		}
	}
	repositories {
		maven {
			url "${new File(buildDir, 'local-repo').toURL()}"
		}
	}
}

 
